#include <map>
#include <string>
#include <iostream>
#include <vector>

using namespace std;

// если имя неизвестно, возвращает пустую строку
string FindNameByYear(const map<int, string>& names, int year) {
  string name;  // изначально имя неизвестно

  // перебираем всю историю по возрастанию ключа словаря, то есть в хронологическом порядке
  for (const auto& item : names) {
    // если очередной год не больше данного, обновляем имя
    if (item.first <= year) {
      name = item.second;
    } else {
      // иначе пора остановиться, так как эта запись и все последующие относятся к будущему
      break;
    }
  }

  return name;
}

string FindNameByYear1(const map<int, string>& names, int year) {
  string n;  // изначально имя неизвестно
  vector<string> n1;

  // перебираем всю историю по возрастанию ключа словаря, то есть в хронологическом порядке
  for (const auto& item : names) {
    // если очередной год не больше данного, обновляем имя
    if (item.first <= year) {
      n1.push_back(item.second);
    } else {
      // иначе пора остановиться, так как эта запись и все последующие относятся к будущему
      break;
    }
  }
for(auto l:n1){
	cout<<l;
}
  if(n1.size()==1){
	  return n1[0];
  }else if(n1.size()>1){
	  n=n1[n1.size()-1]+"(";
	  for(int i=0; i<n1.size()-2; i++){
		  n+=n1[i]+",";
	  }
	  int x1 = n.size() - 1;
	  n = n.erase(x1);
	  n+=")";
  }
  n1.clear();
  return n;
}

class Person {
public:
  void ChangeFirstName(int year, const string& first_name) {
    first_names[year] = first_name;
  }
  void ChangeLastName(int year, const string& last_name) {
    last_names[year] = last_name;
  }
  string GetFullName(int year) {
    // получаем имя и фамилию по состоянию на год year
    const string first_name = FindNameByYear(first_names, year);
    const string last_name = FindNameByYear(last_names, year);

    // если и имя, и фамилия неизвестны
    if (first_name.empty() && last_name.empty()) {
      return "Incognito";

    // если неизвестно только имя
    } else if (first_name.empty()) {
      return last_name + " with unknown first name";

    // если неизвестна только фамилия
    } else if (last_name.empty()) {
      return first_name + " with unknown last name";

    // если известны и имя, и фамилия
    } else {
      return first_name + " " + last_name;
    }
  }
  string GetFullNameWithHistory(int year) {
    // получить все имена и фамилии по состоянию на конец года year
	  // получаем имя и фамилию по состоянию на год year
	      const string first_name1 = FindNameByYear1(first_names, year);
	      const string last_name1 = FindNameByYear1(last_names, year);

	      // если и имя, и фамилия неизвестны
	      if (first_name1.empty() && last_name1.empty()) {
	        return "Incognito";

	      // если неизвестно только имя
	      } else if (first_name1.empty()) {
	        return last_name1 + " with unknown first name";

	      // если неизвестна только фамилия
	      } else if (last_name1.empty()) {
	        return first_name1 + " with unknown last name";

	      // если известны и имя, и фамилия
	      } else {
	        return first_name1 + " " + last_name1;
	      }
  }

private:
  map<int, string> first_names;
  map<int, string> last_names;
};

int main() {
  Person person;

  person.ChangeFirstName(1900, "Eugene");
  person.ChangeLastName(1900, "Sokolov");
  person.ChangeLastName(1910, "Sokolov");
  person.ChangeFirstName(1920, "Evgeny");
  person.ChangeLastName(1930, "Sokolov");
  cout << person.GetFullNameWithHistory(1940) << endl;

  return 0;
}
